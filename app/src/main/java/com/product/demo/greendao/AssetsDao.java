package com.product.demo.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.product.demo.greendao.entity.Assets;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ASSETS".
*/
public class AssetsDao extends AbstractDao<Assets, Long> {

    public static final String TABLENAME = "ASSETS";

    /**
     * Properties of entity Assets.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Code = new Property(2, String.class, "code", false, "CODE");
        public final static Property BarCode = new Property(3, String.class, "barCode", false, "BAR_CODE");
        public final static Property SerialNumber = new Property(4, String.class, "serialNumber", false, "SERIAL_NUMBER");
        public final static Property Specifications = new Property(5, String.class, "specifications", false, "SPECIFICATIONS");
        public final static Property Unit = new Property(6, String.class, "unit", false, "UNIT");
        public final static Property Supplier = new Property(7, String.class, "supplier", false, "SUPPLIER");
        public final static Property ProduceCompany = new Property(8, String.class, "produceCompany", false, "PRODUCE_COMPANY");
        public final static Property MaintainCompany = new Property(9, String.class, "maintainCompany", false, "MAINTAIN_COMPANY");
        public final static Property MaintainStartDate = new Property(10, String.class, "maintainStartDate", false, "MAINTAIN_START_DATE");
        public final static Property MaintainEndDate = new Property(11, String.class, "maintainEndDate", false, "MAINTAIN_END_DATE");
        public final static Property UseDate = new Property(12, String.class, "useDate", false, "USE_DATE");
        public final static Property Department = new Property(13, String.class, "department", false, "DEPARTMENT");
        public final static Property Position = new Property(14, String.class, "position", false, "POSITION");
        public final static Property UserId = new Property(15, String.class, "userId", false, "USER_ID");
        public final static Property UserName = new Property(16, String.class, "userName", false, "USER_NAME");
        public final static Property MainAssetsCode = new Property(17, String.class, "mainAssetsCode", false, "MAIN_ASSETS_CODE");
        public final static Property State = new Property(18, String.class, "state", false, "STATE");
        public final static Property Status = new Property(19, int.class, "status", false, "STATUS");
    }


    public AssetsDao(DaoConfig config) {
        super(config);
    }
    
    public AssetsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ASSETS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"CODE\" TEXT," + // 2: code
                "\"BAR_CODE\" TEXT," + // 3: barCode
                "\"SERIAL_NUMBER\" TEXT," + // 4: serialNumber
                "\"SPECIFICATIONS\" TEXT," + // 5: specifications
                "\"UNIT\" TEXT," + // 6: unit
                "\"SUPPLIER\" TEXT," + // 7: supplier
                "\"PRODUCE_COMPANY\" TEXT," + // 8: produceCompany
                "\"MAINTAIN_COMPANY\" TEXT," + // 9: maintainCompany
                "\"MAINTAIN_START_DATE\" TEXT," + // 10: maintainStartDate
                "\"MAINTAIN_END_DATE\" TEXT," + // 11: maintainEndDate
                "\"USE_DATE\" TEXT," + // 12: useDate
                "\"DEPARTMENT\" TEXT," + // 13: department
                "\"POSITION\" TEXT," + // 14: position
                "\"USER_ID\" TEXT," + // 15: userId
                "\"USER_NAME\" TEXT," + // 16: userName
                "\"MAIN_ASSETS_CODE\" TEXT," + // 17: mainAssetsCode
                "\"STATE\" TEXT," + // 18: state
                "\"STATUS\" INTEGER NOT NULL );"); // 19: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ASSETS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Assets entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(3, code);
        }
 
        String barCode = entity.getBarCode();
        if (barCode != null) {
            stmt.bindString(4, barCode);
        }
 
        String serialNumber = entity.getSerialNumber();
        if (serialNumber != null) {
            stmt.bindString(5, serialNumber);
        }
 
        String specifications = entity.getSpecifications();
        if (specifications != null) {
            stmt.bindString(6, specifications);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(7, unit);
        }
 
        String supplier = entity.getSupplier();
        if (supplier != null) {
            stmt.bindString(8, supplier);
        }
 
        String produceCompany = entity.getProduceCompany();
        if (produceCompany != null) {
            stmt.bindString(9, produceCompany);
        }
 
        String maintainCompany = entity.getMaintainCompany();
        if (maintainCompany != null) {
            stmt.bindString(10, maintainCompany);
        }
 
        String maintainStartDate = entity.getMaintainStartDate();
        if (maintainStartDate != null) {
            stmt.bindString(11, maintainStartDate);
        }
 
        String maintainEndDate = entity.getMaintainEndDate();
        if (maintainEndDate != null) {
            stmt.bindString(12, maintainEndDate);
        }
 
        String useDate = entity.getUseDate();
        if (useDate != null) {
            stmt.bindString(13, useDate);
        }
 
        String department = entity.getDepartment();
        if (department != null) {
            stmt.bindString(14, department);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(15, position);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(16, userId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(17, userName);
        }
 
        String mainAssetsCode = entity.getMainAssetsCode();
        if (mainAssetsCode != null) {
            stmt.bindString(18, mainAssetsCode);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(19, state);
        }
        stmt.bindLong(20, entity.getStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Assets entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(3, code);
        }
 
        String barCode = entity.getBarCode();
        if (barCode != null) {
            stmt.bindString(4, barCode);
        }
 
        String serialNumber = entity.getSerialNumber();
        if (serialNumber != null) {
            stmt.bindString(5, serialNumber);
        }
 
        String specifications = entity.getSpecifications();
        if (specifications != null) {
            stmt.bindString(6, specifications);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(7, unit);
        }
 
        String supplier = entity.getSupplier();
        if (supplier != null) {
            stmt.bindString(8, supplier);
        }
 
        String produceCompany = entity.getProduceCompany();
        if (produceCompany != null) {
            stmt.bindString(9, produceCompany);
        }
 
        String maintainCompany = entity.getMaintainCompany();
        if (maintainCompany != null) {
            stmt.bindString(10, maintainCompany);
        }
 
        String maintainStartDate = entity.getMaintainStartDate();
        if (maintainStartDate != null) {
            stmt.bindString(11, maintainStartDate);
        }
 
        String maintainEndDate = entity.getMaintainEndDate();
        if (maintainEndDate != null) {
            stmt.bindString(12, maintainEndDate);
        }
 
        String useDate = entity.getUseDate();
        if (useDate != null) {
            stmt.bindString(13, useDate);
        }
 
        String department = entity.getDepartment();
        if (department != null) {
            stmt.bindString(14, department);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(15, position);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(16, userId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(17, userName);
        }
 
        String mainAssetsCode = entity.getMainAssetsCode();
        if (mainAssetsCode != null) {
            stmt.bindString(18, mainAssetsCode);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(19, state);
        }
        stmt.bindLong(20, entity.getStatus());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Assets readEntity(Cursor cursor, int offset) {
        Assets entity = new Assets( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // code
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // barCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // serialNumber
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // specifications
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // unit
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // supplier
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // produceCompany
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // maintainCompany
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // maintainStartDate
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // maintainEndDate
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // useDate
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // department
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // position
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // userId
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // userName
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // mainAssetsCode
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // state
            cursor.getInt(offset + 19) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Assets entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBarCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSerialNumber(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSpecifications(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUnit(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSupplier(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setProduceCompany(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMaintainCompany(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMaintainStartDate(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMaintainEndDate(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUseDate(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDepartment(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPosition(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setUserId(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUserName(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setMainAssetsCode(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setState(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setStatus(cursor.getInt(offset + 19));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Assets entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Assets entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Assets entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
